#!/bin/bash

# rewrite of renew_pdb_full
# this script works based on the pdb table in the mysql database
# (-> extracting SEQRES and redundancy reduction are delegated to the database import)
# it writes the output a3m files to the cache and also adds psipred a3m files to the chache
# then it collects the current psipred a3m files to a directory that hhblitsdb.pl can work on

if [ -z "$conf_file" ]; then
	conf_file='/etc/pssh2.conf'
fi

usage()
{
cat << EOT
NAME
  make_new_pdb_full - generate a new pdb_full database 
SYNOPSIS
  make_new_pdb_full [-R|-F n]  [-v] <-m md5List> <-d dbName> 
DESCRIPTION
  make_new_pdb_full iterates over sequences given in the md5List (coming fron the pdb table of Aquaria),
  runs build_hhblits_profile for each sequence (to get a3m files),
  runs addss.pl on each a3m file (based on the best pdb structure for the sequence),
  links the output a3m files to the psipred a3m directory
  and finally runs hhblitsdb.pl on the psipred a3m directory.
  This script assumes that the sequences given in the md5List are valid sequences,
  any sorting out of DNA sequences, short sequences or some with too many non-amino acid residues
  must happen in the process that constructs the md5List. 
OPTIONS
  -d          output name for new pdb_full
  -m          file containing pdb Seqres md5s to run over 
  -F n        Set force remaking status for making of HMM profile (run build_hhblits_profile):
     0           do not make profile unless none exists
     1           run only if the profile is older than the last update of uniprot20 (default)
     2           always run, even if the profile exists 
  -R          Retain (DO NOT remake) the HMM profile (same as -F 0)
  -v          be verbose
  -u          /path/to/uniprot_20_files (without extensions)
  -c          number of cpus hhblits should run in parallel (default $n_cpu)
AUTHOR
  Andrea Schafferhans <andrea.schafferhans@rostlab.org>
EOT
exit 1
}

force=1
debug=0
silent=0
passOpt=" " 
while getopts :sDF:m:Rhd:u: opt
do
	case $opt in
	D) debug=1;;
	F) force=$OPTARG;;
	R) force=0;;
	m) md5List=$OPTARG;;
	d) version=$OPTARG;;
	h) usage; exit;;
	u) u20=$OPTARG;
	s) silent=1; passOpt="$passOpt -$opt";;
	:)  echo "Error: -$OPTARG requires an argument"; usage; exit 1;;
#	*) passOpt="$passOpt -$opt";;
	esac
done

# parameters (will be overwritten by anything read from conf file)
rootDir="/mnt/project/pssh/pssh2_project/" 
pdb_full_dir=$rootDir"data/pdb_full/"
source_dir=$rootDir"src/pdb_full/"
#export HHLIB=$rootDir'hhsuite-2.0.13'
pdb_entries_dir="/mnt/project/rost_db/data/pdb/entries/"
dssp_entries_dir="/mnt/project/rost_db/data/pdb/entries/"

# Note for later:
# how to count the ratio of Xs in SEQRES sequences and limit to protein 
# select `MD5_Hash`, group_concat(pdb_id separator ', ') as pdb_ids, SEQRES, length,  Replace (SEQRES, "X", "") as clean_seqres, length(Replace (SEQRES, "X", "")) as c_length,  ((length - length(Replace (SEQRES, "X", ""))) / length) as x_ratio from PDB_chain where type='Protein' and length>10 group by `MD5_Hash` order by x_ratio  desc limit 10;
# how to find the best resolution pdb for a given md5: 
# select c.pdb_id, c.chain, p.`Resolution`, p.`Experimental_Method` from PDB_chain c, PDB p where c.`MD5_Hash` = '7838b037ee471235d77ba2a140f0cba7' and c.`PDB_ID` = p.`PDB_ID` and  p.`Experimental_Method`='X-ray diffraction' order by resolution limit 1;
# how to get the most recent pdb for a given md5:
# select c.pdb_id, c.chain, p.Published, p.`Experimental_Method` from PDB_chain c, PDB p where c.`MD5_Hash` = '7838b037ee471235d77ba2a140f0cba7' and c.`PDB_ID` = p.`PDB_ID` order by Published limit desc 1;
# how to get all chains for a a given md5
# select c.pdb_id, c.chain, c.`Align_to_SEQRES` from PDB_chain c where c.`MD5_Hash`='7838b037ee471235d77ba2a140f0cba7';
# how to get the best pdb id for the secondary structure for a given md5: 
# select c.pdb_id, c.chain,  c.`Align_to_SEQRES`, p.`Resolution`, p.`Experimental_Method`,  p.Published  from PDB_chain c, PDB p where c.`MD5_Hash` = '7838b037ee471235d77ba2a140f0cba7' and c.`PDB_ID` = p.`PDB_ID`;
# then interprete the align_to_seqres in a dedicated script to find the longest match, and also to choose the best resolution / most recent structure
# before giving the a3m with the md5 sum as input to addss.pl, we have to replace the id for the found pdb_id
# Note also that the hhsuite installed on the cluster is not customised to our local Rostlab setup

if [ ! -s $md5List ]
then
	echo The file of md5 numbers to iterate over does not exist or is empty
	exit 1
files


