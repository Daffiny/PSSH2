#!/bin/bash

# this script is used to sum up the parameters for a profile building hhblits in one place
# it is used by pp_pssh2 (for PredictProtein) and by the generate_pssh2 perl script

### uniprot20 location
u20='/var/tmp/rost_db/data/hhblits/uniprot20_current'
#u20='/usr/share/hhblits/uniprot20_current'
### amount of memory to use for big jobs
bigMem=5
### parallel runs
$n_cpu=1

reportedHits=" -B 10000 -Z 10000"
hhblitsLog='hhblits.log'

# get configurable options, e.g. local file paths
if [ -s pssh2.cfg ]
then
	source pssh2.cfg
fi

usage()
{
cat << EOT
NAME
  build_hhblits_profile - generate a hhblits HHM (called hhm) by scanning against uniprot_20 
SYNOPSIS
  build_hhblits_profile <-f fasta_sequence_file> <-m hmm_file_name> <-a a3m_file_name> 
          <-r results_file_name> [-b] [-u /path/to/uniprot_20] [-s] [-p number_of_cpus]
DESCRIPTION
  build_hhblits_profile takes an input sequence,
  searches against the uniprot20 database of HMMs 
  and generates a HHM output (HMM-profile) as well as 
  an a3m file of the alignment and
  a result file containing details of the search
  The databases to search with hhblits should be available under $u20
  unless they are explicitly given in the input.
OPTIONS
  -h          The option -h displays help and exits.
  -s          Operate silently 
  -f          input sequence file (fasta format)
  -m          output file name for HMM (hhm format)
  -a          output file name for multiple sequence alignment (a3m format)
  -r          output file name for hhblits result file (hhr format)
  -b          big job -> run with more memory ($bigMem) 
  -u          /path/to/uniprot_20_files (without extensions)
  -s          operate silently
  -p          number of cpus hhblits should run in parallel (default $n_cpu)
AUTHOR
  Andrea Schafferhans <andrea.schafferhans@rostlab.org>
EOT
exit 1
}


while getopts "f:m:a:r:bu:hs" option;
do
 case $option in
  f)
   # expects fasta formatted input file
   fasta=$OPTARG;
   hhblitsLog=$fasta.$hhblitsLog
   ;;
  m)
   # name of output file for hmm 
   hhm=$OPTARG;
   ;;
  a)
   # name of output file for a3m 
   a3m=$OPTARG;
   ;;
  r)
   # name of output file for hhblits results  
   hhr=$OPTARG;
   ;;
  u)
   # path for uniprot_20 for hhblits
   u20=$OPTARG;
   ;;
  p)
   # number of cpus to run on
   p=$OPTARG;
   ;;
  b)
	echo 'received -b, setting option -maxmem $bigMem'
  	b='-maxmem $bigMem '
   ;;
  :)
   echo "option -$OPTARG needs an argument"
   usage
   ;;
  h)
   usage  	
   ;;
  s)
   hhblitsLog='/dev/null'  	
   ;;
  *)
   echo "invalid option -$OPTARG" 
   usage
   ;;
 esac
done

if  [ -z "$fasta" -o -z "$hhm" -o -z "$a3m" -o -z "$hhr" ]; 
then
	usage
fi

#echo "running hhblits -cpu 1 -i $fasta -d $u20 -ohhm $hhm -oa3m $a3m -o $hhr $b $reportedHits"
hhblits -cpu $n_cpu -i $fasta -d $u20 -ohhm $hhm -oa3m $a3m -o $hhr $b $reportedHits >> $hhblitsLog




