#!/bin/bash

### runs pssh2 for a set of md5 sums
#$ -o /dev/null
#$ -e /dev/null

#set -x

if [ -z "$conf_file" ]; then
	conf_file='/etc/pssh2.conf'
fi

usage()
{
cat << EOT
NAME
  pssh2_aws - generate pssh2 type sequence-to-structrue alignments for many sequences on AWS
SYNOPSIS
  pssh2_aws [-h] [-D] [-- ...]
DESCRIPTION
  pssh2_aws runs until terminated externally.
  It (repeatedly) queries for md5 sums to process,
  for each md5 it
  - gets corresponding cache entries from S3,
  - gets the associated sequences from the database,
  - runs pssh2_seq (which adds the alignment to the database),
  - stores the result files in S3.
  If there are no md5 sums to process, it sleeps for a radom time.
  See pssh2_seq -h for more details on pssh2_seq.
  Defaults are configured in $conf_file.
OPTIONS
  -h          The option -h displays help and exits.
  -D          Debug option: do not remove or zip output files (passed on to pssh2_seq)
  Any other parameters behind "--" are passed on to the child scripts.
AUTHOR
  Andrea Schafferhans <andrea.schafferhans@rostlab.org>
EOT
}


### base path to cache
pssh2_cache="/mnt/data/pssh_cache/"
### work directory
temp_work="/mnt/data/tmp/pssh2"
### table to store pssh2 calculation status in
status_table="pssh2_active_counts"

# get configurable options, e.g. local file paths
if [ -s $conf_file ]
then
	source $conf_file
fi

debug=0
passOpt=" " 
while getopts :Dhm: opt
do
	case $opt in
	D) debug=1; passOpt="$passOpt -$opt";; 
	h) usage; echo " "; pssh2_seq -h; exit;;
#	m) md5list=$OPTARG;;
#	*) passOpt="$passOpt $OPTARG";;
	esac
done

if [ $debug -eq 1 ]
then
	set -x
fi

shift $(expr $OPTIND - 1 )
passOpt="$passOpt $@"
get_seq=0

while true 
do
	
	# get the next bunch of md5s to process
	md5list=`get_md5list_aws`  # TODO: write get_md5_aws (maybe with a parameter defining sequence size)
	# get_md5list_aws is responsible for sleeping while no jobs are available!

	for md5 in $md5list 
	do
		# get subdir names for cache structure
		M=`echo $md5|cut -b1,2`
		M2=`echo $md5|cut -b3,4`

	### full path to cachedir
		CC="$pssh2_cache$M/$M2/$md5"
		mkdir -p $CC
		if [ -d $CC ] 
		then
			echo "working in $CC"
		else 
			echo "ERROR: was not able to work on cache for $CC please go fix"
			# TODO: we should probably raise and error and die here!
		fi

		# look for md5 in S3 and unpack
		# TODO

		input_seq_file=$CC/query.fasta
		# check whether an input file already exists in $CC
		if [ -s $input_seq_file ] 
		then
			old_md5=`cat $input_seq_file|fasta_to_md5`
			if  [ $old_md5 == $md5 ]
			then
				echo "working with old file $input_seq_file, with md5: $old_md5"
			else 
				get_seq=1
				echo "old file $input_seq_file, has different md5: $old_md5 -> retrieve again!"
			fi
		else
			get_seq=1
		fi

		if [ $get_seq -eq 1 ]
		then 
			temp_fasta_file=`get_fasta_for_md5 $md5`
			if [ -s $temp_fasta_file ]
			then	
				cp $temp_fasta_file $input_seq_file
			else 
				echo "ERROR: didn't get the sequence for $md5"
			fi
		fi

		if [ -s $input_seq_file ] 
		then
			cd $CC
#		pwd
#		ls -lahtr
			pssh2_seq $passOpt
			
			# pack directory and write to S3
			# TODO 

			# send the queue a message that this sequence has been processed
			# TODO

			cd $temp_work

		else 
			s=`date +%s`
			DB.pssh2_local "insert into pssh2_local.$status_table set md5=\"$md5\" , count=-99 , stamp=$s , runtime=$SECONDS" 
			echo "ERROR: could not find sequence: $input_seq_file or $temp_fasta_file"
		fi

	done

done

md5list = 
