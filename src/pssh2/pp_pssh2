#!/bin/bash
## run the necessary things for pssh2 predictions
### run and parse hhblits

usage()
{
cat << EOT
NAME
  pp_pssh2 - generate pssh2 type sequence-to-structrue alignments for PredictProtein
SYNOPSIS
  pp_pssh2 [-s] [-h]
DESCRIPTION
  pp_pssh2 takes an input sequence (query.fasta) and generates sequence-to-structure alignments 
  for this sequence. 
  To this end, it starts the two subsequent HHblits runs:
  1) build_hhblits_profile: search against uniprot20 database of HMMs and generate a 
      HHM output (HMM-profile)
  2) scan_structures_hhblits: starting with the HHM output from step 1,
      search against the pdb_full database of HMMs and generate a HHR ouput
  Subsequently, it parses the HHR output from the second run using the "parse_hhr_for_pssh2" 
  perl script and generates a .pssh2 file.
  Finally, this outputfile is read into the MySQL database pssh2_local, 
  using "DB.pssh2_local" to retrieve the access parameters.
  Any input not mentioned in options is passed on to 1) and 2). 
  The databases to search with hhblits should be available under /var/tmp/rost_db/data/hhblits/
  unless .
OPTIONS
  -h          The option -h displays help and exits.
  -d          Debug option: do not remove or zip output files
  -s          Operate silently (passed on to the child scripts.)
  any other parameters are also passed on to the child scripts
AUTHOR
  Andrea Schafferhans <andrea.schafferhans@rostlab.org>
EOT
}

while getopts hsdf opt
do
	case $opt in
	s) silent=1;;
	d) echo -e "debug mode: do not change output files \n"; debug=1;;
	f) force=1;;
	h) usage; exit;;
	esac
done

fail=0
 
# check whether we already have a uniprot20 hmm
if [ -s query.uniprot20.hhm ] 
then 
    echo ""
else
    # bla
fi	
 
 
 time nice build_hhblits_profile -f  query.fasta -m query.uniprot20.hhm -a query.uniprot20.a3m -r query.uniprot20.hhr $*

 if [ -s query.uniprot20.hhm ] 
 then
 	time nice scan_structures_hhblits -m query.uniprot20.hhm -r query.uniprot20.pdb.full.hhr $*
 else
	fail=-1
 fi
 
 if [ -s query.uniprot20.pdb.full.hhr ]
 then
 	time nice parse_hhr_for_pssh2 -i  query.uniprot20.pdb.full.hhr -s  query.fasta -o query.pssh2
 elif [ $fail==0 ]
 then
 	fail=-2	
 fi
	

### add output to the db
 s=`date +%s`
 md5=`cat query.fasta | fasta_to_md5`
 if [ -s query.pssh2 ] 
 then
	 DB.pssh2_local "load data local infile 'query.pssh2' IGNORE INTO TABLE pssh2_local.pssh2_pp columns terminated by ',' (protein_sequence_hash,PDB_chain_hash,Repeat_domains,E_value,@var_id_score,Alignment) set Identity_Score=@var_id_score*100 "
 	n=`cat query.pssh2 |wc -l`
 	DB.pssh2_local "insert into pssh2_local.pssh2_pp_counts set md5=\"$md5\" , count=$n , stamp=$s "
 else
 	if [ $fail==0 ]
 	then
 		fail=-3
 	fi
 	DB.pssh2_local "insert into pssh2_local.pssh2_pp_counts set md5=\"$md5\" , count=$fail , stamp=$s " 		
 fi
  
### compress things / delete
### TODO: discuss whether we really want to delete -- and discuss where this should happen
 rm query.uniprot20.a3m  
# rm query.uniprot20.pdb.full.hhr
 gzip query.uniprot20.pdb.full.hhr
 gzip query.uniprot20.hhr
# gzip query.pssh2