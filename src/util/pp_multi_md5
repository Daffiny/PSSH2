#!/bin/bash

### runs pssh2 for a set of md5 sums
#$ -o /dev/null
#$ -e /dev/null

#set -x

conf_file='/etc/pssh2.conf'

usage()
{
cat << EOT
NAME
  pp_multi_md5 - submit pp for a number of sequences based on md5 sums
SYNOPSIS
  pp_multi_md5 [-h] [-D] [-m \"md5 input list\"] [-- ...]
DESCRIPTION
  pp_multi_md5 takes md5 sums from the command line (behind -m),
  gets the associated sequences from the database,
  and runs predictprotein for each of the sequences.
  Defaults are configured in $conf_file.
OPTIONS
  -h          The option -h displays help and exits.
  -D          Debug option
  Any other parameters behind "--" are passed on to the child scripts.
AUTHOR
  Andrea Schafferhans <andrea.schafferhans@rostlab.org>
EOT
}

### base path to cache
pssh2_cache="/mnt/project/psshcache/result_cache_2014/"
### work directory
temp_work="/tmp/pp"
### table to store pssh2 calculation status in
status_table="pp_status"
### local database path (to avoid NFS)
DB="/var/tmp/rost_db/data"

# get configurable options, e.g. local file paths
if [ -s $conf_file ]
then
	source $conf_file
fi

pp_status_table="pp_status"

debug=0
passOpt=" " 
while getopts :Dhm: opt
do
	case $opt in
	D) debug=1;; 
	h) usage; exit;;
	m) md5list=$OPTARG;;
#	*) passOpt="$passOpt $OPTARG";;
	esac
done

if [ $debug -eq 1 ]
then
	set -x
fi

shift $(expr $OPTIND - 1 )
passOpt="$passOpt $@"

CC_base='/mnt/project/psshcache/pp_result_cache_2014/ehec/'
CC="$pssh2_cache$M/$M2/$md5"

for md5 in $md5list 
do

	# get subdir names for cache structure
	M=`echo $md5|cut -b1,2`
	M2=`echo $md5|cut -b3,4`

	CC="$CC_base$M/$M2/$md5" 
	echo $CC
	input_seq_file=$CC/query.fasta
	
	temp_fasta_file=`get_fasta_for_md5 $md5`
	if [ -s $temp_fasta_file ]
	then	
		### create cachedir if not existent
		mkdir -p $CC
		if [ -d $CC ] 
		then
			cp $temp_fasta_file $input_seq_file
		else 
			echo "ERROR: was not able to work on cache for $CC please go fix"
		fi
	fi

	if [ -s $input_seq_file ] 
	then
		cd $CC
#		pssh2_seq $passOpt
		predictprotein --seqfile $input_seq_file  -c 4 --blast-processors 1  --bigblastdb $DB/big/big --big80blastdb $DB/big/big_80 --pfam2db $DB/pfam_legacy/Pfam_ls --pfam3db $DB/pfam/Pfam-A.hmm --prositedat $DB/prosite/prosite.dat --prositeconvdat $DB/prosite/prosite_convert.dat  --swissblastdb $DB/swissprot/uniprot_sprot --cache-merge -d $passOpt
		pp_output_path=`ppc_fetch --seqfile query.fasta -d`
		count=0
		if [ $pp_output_path ]
		then
			if [ -d $pp_output_path ]
			then
				count=`ls -1 $pp_output_path | wc -l `
				ln -s $pp_output_path $CC
			fi
		fi
		s=`date +%s`
		echo "insert into pssh2_local.$pp_status_table set md5=\"$md5\" , count=$count , stamp=$s , runtime=$SECONDS"
		DB.pssh2_local "insert into pssh2_local.$pp_status_table set md5=\"$md5\" , count=$count , stamp=$s , runtime=$SECONDS ON DUPLICATE KEY UPDATE count=$count , stamp=$s , runtime=$SECONDS "         
		cd $temp_work
	else 
		s=`date +%s`
		DB.pssh2_local "insert into pssh2_local.$pp_status_table set md5=\"$md5\" , count=-99 , stamp=$s , runtime=$SECONDS" 
		echo "ERROR: could not find sequence: $input_seq_file or $temp_fasta_file"
	fi

done
