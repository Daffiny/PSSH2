#!/bin/bash
### get fasta files from the db aquaria.protein_sequence   works on md5s 

conf_file='/etc/pssh2.conf'

### work directory
temp_work="/tmp/pssh2"
### sequence tables in mysql
sequence_tables="protein_sequence protein_sequence_user"
### Note:
### by making protein_sequence_user a view in MySQL, one can move this configuration to the database
### (where it belongs) 
## Example config in MySQL:
# create view protein_sequence_test AS 
# select * from `protein_sequence_user_upload`
# UNION ALL 
# select * from protein_sequence_ehec
# UNION ALL
# select * from `protein_sequence_genbank_ebola_proteins`
# UNION ALL
# select * from protein_sequence_uniprot_ebola_proteins;
## The view is of type union all, though, so limit 1 is important in the query! 

# get configurable options, e.g. local file paths
if [ -s $conf_file ]
then
	source $conf_file
fi

usage()
{
cat << EOT
NAME
  get_fasta_for_md5 - create a md5.fasta file for each given md5 hash 
SYNOPSIS
  get_fasta_for_md5 [-h] md5_hash1 [ md5_hash2 ... md5_hashN ] 
DESCRIPTION
  get_fasta_for_md5 takes one or more input sequence md5 hash(es) and writes out 
  one or more fasta files in dedicated subdirectories $temp_work/md5/. 
  The file names with full path are returned on STDOUT.
  The sequence information comes from the protein_sequence table in the aquaria mysql 
  database.
  The credentials for querying the database are stored in DB.aquaria_local script.
  The input scripts for the aquaria database are found in the Aquaria project.
  Defaults are configured in $conf_file.
OPTIONS
  -h          The option -h displays help and exits.
AUTHOR
  Andrea Schafferhans <andrea.schafferhans@rostlab.org>
EOT
}

# if there are no arguments or -h, then print man entry
if [ $# -eq 0 ]
then
	usage 
	exit
fi

while getopts :h opt
do
	case $opt in
	h) usage; exit;;
	esac
done

for md5 in $* 
do
	mkdir -p $temp_work/$md5  2>/dev/null
	for table in $sequence_tables 
	do
		sequence=`DB.aquaria_local "select Sequence from $table where MD5_hash =\"$md5\" " limit 1 | tail -n +2`
		# no need to check other tables if we have found the sequence already
		if [ $sequence ]
		then
			break
		fi
	done
	
	# don't write empty sequence files!
	if [ $sequence ]
	then 
		echo -e ">$md5\n$sequence" > $temp_work/$md5/$md5.fasta 
		echo "$temp_work/$md5/$md5.fasta"
	else 
		# since this can processes several md5s, we cannot return an error state here
		# therefore we instead return an empty file
		touch $temp_work/$md5/$md5.fasta
		echo "$temp_work/$md5/$md5.fasta" 
	fi
done