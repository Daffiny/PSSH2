#!/bin/bash

### runs pssh2 for a set of md5 sums
#$ -o /dev/null
#$ -e /dev/null

#set -x


usage()
{
cat << EOT
NAME
  pp_pssh2 - generate pssh2 type sequence-to-structrue alignments for PredictProtein
SYNOPSIS
  pp_pssh2 [-s] [-h] [-D] [-F] [-R]
DESCRIPTION
  pp_pssh2 takes an input sequence (query.fasta) and generates sequence-to-structure alignments
  for this sequence.
  To this end, it starts the two subsequent HHblits runs:
  1) build_hhblits_profile: search against uniprot20 database of HMMs and generate a
      HHM output (HMM-profile)
  2) scan_structures_hhblits: starting with the HHM output from step 1,
      search against the pdb_full database of HMMs and generate a HHR ouput
  Subsequently, it parses the HHR output from the second run using the "parse_hhr_for_pssh2"
  perl script and generates a .pssh2 file.
  Finally, this outputfile is read into the MySQL database pssh2_local,
  using "DB.pssh2_local" to retrieve the access parameters.
  The database pssh2_local_counts keeps track of the generation date of the data, the runtime
  and the number of hits found for the sequence. Negative count number indicate error states:
    -1 -> build_hhblits_profile, -2 -> scan_structures_hhblits, -3 -> parse_hhr_for_pssh2,
    -99 -> sequence not found
  Any input not mentioned in options is passed on to 1) and 2).
  The databases to search with hhblits should be available under /var/tmp/rost_db/data/hhblits/
  unless they are explicitly given in the input.
OPTIONS
  -h          The option -h displays help and exits.
  -D          Debug option: do not remove or zip output files
  -F          Force remaking of HMM profile (run build_hhblits_profile) (is default behaviour)
  -R          Retain (DO NOT remake) the HMM profile (do not run build_hhblits_profile unless necessary)
  -s          Operate silently (passed on to the child scripts.)
  any other parameters are also passed on to the child scripts
AUTHOR
  Andrea Schafferhans <andrea.schafferhans@rostlab.org>
EOT
}



### base path to cache
p_cache="/mnt/project/pssh/pssh2_project/data/pssh2/result_cache/"

DB="/var/tmp/rost_db/data";
T="/tmp/pssh2"

for i in $* ; do
### get fasta and tmpdir block
	md5=$i

	mkdir -p $T/$i  2>/dev/null
	chmod 777 $T  $T/$i 
	if [ -s $T/$i/$i.fasta ] 
	then
		ls -l $T/$i/$i.fasta
	else
		get_fasta_from_db $i
	fi

	if [ -s $T/$i/$i.fasta ] 
	then
		# get subdir names for cache structure
		M=`echo $md5|cut -b1,2`
		M2=`echo $md5|cut -b3,4`
		echo $md5 $M $M2

### full path to cachedir
		CC="$p_cache$M/$M2/"
		echo $CC

### create cachedir if not existent
		mkdir -p $CC
		if [ -d $CC ] ; then
			cd $CC
			pwd

### now start the real work
			ls -lahtr
			cp  $T/$i/$i.fasta query.fasta
#	    	/usr/bin/pp_pssh2 
			/mnt/project/pssh/pssh2_project/src/pssh2/pp_pssh2
			cd $T
		else 
			echo "ERROR: was not able to work on cache for $CC please go fix"
		fi
	
	else
	
		s=`date +%s`
		DB.pssh2_local "insert into pssh2_local.pssh2_pp_counts set md5=\"$i\" , count=-99 , stamp=$s , runtime=$SECONDS" 
		echo "ERROR: could not find sequence: $T/$i/$i.fasta"

	fi

done
